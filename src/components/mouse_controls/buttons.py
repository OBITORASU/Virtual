import cv2
import numpy.typing as nt
from pynput.mouse import Button, Controller

from src.components.helpers.distance import findDistance

mouse = Controller()


def leftClick(landmarks: list, image: nt.NDArray):
    """Takes the landmarks and image stream as arguments. It processes the
    landmarks to find the distance between the tip of the index finger and the
    tip of the thumb. If the tips are touching it creates a left click event
    using pynput. Additionally it draws on the image stream to highlight click
    threshold and onclick events.

    Args:
        landmarks (list): Values corresponding to the hand landmarks detected
        in the image stream.
        image (nt.NDArray): An NDArray of an image generated by the
        cv2.VideoCapture(0).read() function.
    """
    length, cx, cy = findDistance(4, 8, landmarks)
    cv2.circle(image, (cx, cy), 5, (0, 255, 0), cv2.FILLED)
    if length < 25:
        cv2.circle(image, (cx, cy), 10, (0, 0, 255), cv2.FILLED)
        mouse.click(Button.left)


def rightClick(landmarks: list, image: nt.NDArray):
    """Takes the landmarks and image stream as arguments. It processes the
    landmarks to find the distance between the tip of the middle finger and
    the tip of the thumb. If the tips are touching it creates a right click
    event using pynput. Additionally it draws on the image stream to highlight
    click threshold and onclick events.

    Args:
        landmarks (list): Values corresponding to the hand landmarks detected
        in the image stream.
        image (nt.NDArray): An NDArray of an image generated by the
        cv2.VideoCapture(0).read() function.
    """
    length, cx, cy = findDistance(4, 12, landmarks)
    cv2.circle(image, (cx, cy), 5, (0, 255, 0), cv2.FILLED)
    if length < 25:
        cv2.circle(image, (cx, cy), 10, (0, 0, 255), cv2.FILLED)
        mouse.click(Button.right)
